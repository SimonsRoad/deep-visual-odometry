''' This is a script to get training data from a model folder
    and plot it using matplotlib.
 Can be imported from a jupyter notebook for easy path plotting.'''
import os
import matplotlib as mpl
from datatool import get_training_data

FILE_PATH = os.path.dirname(os.path.abspath(__file__))

def plot_path(model_folder='', model_type='global', paths=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):
    '''
    model_folder: the folder to look for model files in

    model_type: 'global', 'relative', or 'quaternion'

    run: plots first model with this number in its name.
    If no run given, plots graphs for all model files in model folder.

    paths: Which paths should be plotted
    '''
    #check that model (folder) name given
    if not model_name:
        raise ValueError('model folder not specified, must provide model_name arg')

    #Get file paths
    model_root = os.path.join(FILE_PATH, '..', '..', 'models', model_name)

    model_files = os.listdir(model_root).sort()

    for i, mfile in enumerate(model_files):
        if mfile[-3:] == '.h5':
            model_files[i] = os.path.join(model_root, mfile.replace('.h5', '.json'))
        else:
            model_files.remove(mfile)

    if len(model_files) == 0:
        raise Exception('no models (.h5) found in directory "' + model_name + '"')

    untested_models = []
    for datafile in model_files:
        if not os.path.exists(datafile):
            print(datafile + " not found\nAutomatically evaluating model.")
            untested_models.append(datafile.replace('.json', '.h5'))

    # Plot model performance on paths
    if len(untested_models):
        if model_type == 'global':
            evaluate_glob(untested_models)
        elif model_type == 'relative':
            evaluate_rel(untested_models)
        elif model_type == 'quaternion':
            evaluate_quat(untested_models)
        else:
            raise ValueError('invalid model_type for evaluation')

    del untested_models

    plot(model_files)


def plot(model_files=[]):
    '''
    plots paths generated by given models
    '''
    if not len(model_files):
        raise ValueError('no model files given to evaluate')


def evaluate_glob(model_files=[]):
    '''
    get data from model and dump to jsons.
    '''
    if not len(model_files):
        raise ValueError('no model files given to evaluate')
    x, y = get_training_data()
    for mfile in model_files:
        
